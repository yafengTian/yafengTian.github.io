<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>软件设计模式之原型模式及浅复制和深复制</title>
    <url>/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%E5%8F%8A%E6%B5%85%E5%A4%8D%E5%88%B6%E5%92%8C%E6%B7%B1%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<p><strong>欢迎各位大哥大姐访问个人博客<a href="http://www.yafengshuanger.cn/" target="_blank" rel="noopener">码农峰酱</a></strong></p>
<h1 id="一、应用场景"><a href="#一、应用场景" class="headerlink" title="一、应用场景"></a>一、应用场景</h1><ul>
<li>对同一个对象或者类似对象需要多次进行实例化时；</li>
<li>对于实例化不方便而复制比较方便时。</li>
</ul>
<h2 id="二、原型模型定义"><a href="#二、原型模型定义" class="headerlink" title="二、原型模型定义"></a>二、原型模型定义</h2><p>用一个已经创建的实例作为原型，通过复制该原型来创建一个和原型相同或者相似的新对象。在这里，原型对象指定了要创建的对象的种类，用这种方法创建对象非常有效，根本不需要知道创建对象的具体的细节。</p>
<h2 id="三、原型模式中几个重要的角色："><a href="#三、原型模式中几个重要的角色：" class="headerlink" title="三、原型模式中几个重要的角色："></a>三、原型模式中几个重要的角色：</h2><p>（1）抽象原型类：规定了原型对象必须实现的接口；<br>（2）具体原型类：实现了抽象原型类的的clone()方法，是可以被复制的；<br>（3）访问类：使用具体类中的clone()方法来复制对象。</p>
<h2 id="四、原型模式类图："><a href="#四、原型模式类图：" class="headerlink" title="四、原型模式类图："></a>四、原型模式类图：</h2><p><img src="https://img-blog.csdnimg.cn/20191104122925953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvZGVyX1lhZmVuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="五、应用举例"><a href="#五、应用举例" class="headerlink" title="五、应用举例"></a>五、应用举例</h2><p>应聘者对于不同的公司写不同的简历，但个人信息都相同，因此只需修改除个人信息之外的信息<br>常规做法是写一个简历类，根据不同的公司实现不同的简历对象，而原型模型：使用clone()方法，克隆多个不同的实例对象。使用原型模型，避免手动创建对象，不需要执行构造方法，减少工作量，提高性能。<br><strong>1、浅复制</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resume</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;<span class="comment">/*实现Cloneable接口*/</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String company;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Experiment&gt; experimentList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Experiment&gt; <span class="title">getExperimentList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> experimentList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addExperimentList</span><span class="params">(Experiment experiment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.experimentList .add(experiment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Resume</span><span class="params">(String name, String sex, <span class="keyword">int</span> age, String company,List&lt;Experiment&gt; experimentList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.company = company;</span><br><span class="line">        <span class="keyword">this</span>.experimentList  =experimentList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(String company)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Information</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"个人信息："</span>);</span><br><span class="line">        System.out.println(<span class="string">"Name："</span>+<span class="keyword">this</span>.name+<span class="string">"  Age:"</span>+<span class="keyword">this</span>.age+<span class="string">"  Sex:"</span>+<span class="keyword">this</span>.age);</span><br><span class="line">        System.out.println(<span class="string">"目标公司："</span>+<span class="keyword">this</span>.company);</span><br><span class="line">        System.out.println(<span class="string">"工作经历："</span>);</span><br><span class="line">        <span class="keyword">for</span> (Experiment experiment:experimentList) &#123;</span><br><span class="line">            System.out.println(<span class="string">"company:"</span> + experiment.getCompanyName()+</span><br><span class="line">                    <span class="string">" time:"</span>+experiment.getTime()+<span class="string">"sallary:"</span>+experiment.getSallary());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *实现Cloneable接口的clone（）方法</span></span><br><span class="line"><span class="comment">    * 浅复制</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  (Resume)<span class="keyword">super</span>.clone();<span class="comment">//调用父类clone()方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        List&lt;Experiment&gt; experimentList = <span class="keyword">new</span> ArrayList&lt;Experiment&gt;();</span><br><span class="line">        Experiment experiment1 = <span class="keyword">new</span> Experiment(<span class="string">"Tecent"</span>,<span class="string">"2019.06-2022-7"</span>,<span class="number">20000</span>);</span><br><span class="line">        experimentList.add(experiment1);</span><br><span class="line">        Resume resume = <span class="keyword">new</span> Resume(<span class="string">"yafeng"</span>,<span class="string">"man"</span>,<span class="number">23</span>,<span class="string">"HuaWei"</span>,experimentList);</span><br><span class="line">        resume.Information();</span><br><span class="line">        Resume resume1 = (Resume)resume.clone();</span><br><span class="line">        resume1.setCompany(<span class="string">"Alibaba"</span>);</span><br><span class="line">        resume1.Information(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上述代码的意思是当你第一次投递简历时你写了一份简历，所投公司为华为；第二次再投阿里巴巴时，仅需修改目标公司的名称，其个人信息不变，这样做的好处就是省时省力，高效快捷。上述代码输出的结果如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">个人信息：</span><br><span class="line">Name：yafeng  Age:<span class="number">23</span>  Sex:<span class="number">23</span></span><br><span class="line">目标公司：HuaWei</span><br><span class="line">工作经历：</span><br><span class="line">company:Tecnet time:<span class="number">2019.06</span>-<span class="number">2022</span>-<span class="number">7</span>sallary:<span class="number">20000.0</span></span><br><span class="line">个人信息：</span><br><span class="line">Name：yafeng  Age:<span class="number">23</span>  Sex:<span class="number">23</span></span><br><span class="line">目标公司：Alibaba</span><br><span class="line">工作经历：</span><br><span class="line">company:HuaWei time:<span class="number">2019.06</span>-<span class="number">2022</span>-<span class="number">7</span>sallary:<span class="number">20000.0</span></span><br></pre></td></tr></table></figure></div>

<p><strong>那么到底什么是浅复制呢？在上述代码的基础上再添加如下代码，即向resume对象的experimentList属性中再添加一个数据，代码如下：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"=======================================举例说明浅复制====================================="</span>);</span><br><span class="line"> Experiment experiment2 = <span class="keyword">new</span> Experiment(<span class="string">"Baidu"</span>,<span class="string">"2022.08-2025-7"</span>,<span class="number">30000</span>);</span><br><span class="line"> resume.addExperimentList(experiment2);</span><br><span class="line"> System.out.println(resume == resume1);</span><br><span class="line"> System.out.println(resume.getExperimentList() == resume1.getExperimentList());</span><br></pre></td></tr></table></figure></div>

<p>输出结果如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">=======================================举例说明浅复制=====================================</span><br><span class="line">个人信息：</span><br><span class="line">Name：yafeng  Age:<span class="number">23</span>  Sex:<span class="number">23</span></span><br><span class="line">目标公司：Alibaba</span><br><span class="line">工作经历：</span><br><span class="line">company:Tecent time:<span class="number">2019.06</span>-<span class="number">2022</span>-<span class="number">7</span>sallary:<span class="number">20000.0</span></span><br><span class="line">company:Baidu time:<span class="number">2022.08</span>-<span class="number">2025</span>-<span class="number">7</span>sallary:<span class="number">30000.0</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure></div>

<p><strong>resume == resume1为false，即resume 和resume1两个不同的对象，而resume.getExperimentList() == resume1.getExperimentList()为true说明在对象复制时仅仅复制了该对象属性的引用，而从上述输出中也可以看出，在给resume对象的experimentList属性添加一个数据时，resume1的experimentList属性也发生了变化，这就是浅复制。</strong> </p>
<blockquote>
<p><strong>浅复制总结成一句话就是：通过clone方法复制时，对象的属性通过复制引用的方式来完成对象复制的一种复制方式。</strong></p>
</blockquote>
<p><strong>2、深复制（通过对象流实现）</strong><br>将述代码中Resume和Experience两个类实现的接口换为Serializable，除测试代码其他的代码均不变，测试代码如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException, IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    Resume resume=<span class="keyword">new</span> Resume(<span class="string">"yafeng"</span>,<span class="string">"男"</span>,<span class="number">21</span>);</span><br><span class="line">    WorkExperimence workExperimence1= <span class="keyword">new</span> WorkExperimence(<span class="string">"Tencent"</span>,<span class="string">"2015.07-2019.06"</span>,<span class="number">20000</span>);</span><br><span class="line">    resume.getWorkExperimenceList().add(workExperimence1);</span><br><span class="line">    <span class="comment">//将对象转换为字节写入流中</span></span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    ObjectOutputStream oops = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">    oops.writeObject(resume);</span><br><span class="line">    <span class="comment">//从流中读出</span></span><br><span class="line">    ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">    ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">    Resume resume1 = (Resume) ois.readObject();</span><br><span class="line">    System.out.println(<span class="string">"============================举例说明深复制======================================="</span>);</span><br><span class="line">    System.out.println(resume == resume1);</span><br><span class="line">    System.out.println(resume.getWorkExperimenceList() == resume1.getWorkExperimenceList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">=========================举例说明深复制==================================</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure></div>

<p><strong>上述结果说明，深复制当中，复制后的对象和原对象是两个完全不同的对象，没有任何关联，只是它们的属性值都是相同的，后续对任何一个的修改或其他操作都不会对另外一个有影响！本文是通过对象流的读写来完成深复制的。</strong></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式的两种写法：线程安全的饿汉式单例模式和懒汉式单例模式</title>
    <url>/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95%EF%BC%9A%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E9%A5%BF%E6%B1%89%E5%BC%8F%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%87%92%E6%B1%89%E5%BC%8F%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="一般我们在项目开发中有时候常会遇到数据库的连接（不使用框架），我们常会在dao类中写一些通用的方法以供后面使用。一般的做法是哪里需要操作数据库的方法哪里就会创建一个对象，然后再引用对象里面的操作方法，这样做的不好的地方就是创建的对象比较多，比较消耗内存，降低程序效率，而我们完全可以只创建一个对象，然后哪里需要哪里就直接用，无需重新创建，这就是单例模式。"><a href="#一般我们在项目开发中有时候常会遇到数据库的连接（不使用框架），我们常会在dao类中写一些通用的方法以供后面使用。一般的做法是哪里需要操作数据库的方法哪里就会创建一个对象，然后再引用对象里面的操作方法，这样做的不好的地方就是创建的对象比较多，比较消耗内存，降低程序效率，而我们完全可以只创建一个对象，然后哪里需要哪里就直接用，无需重新创建，这就是单例模式。" class="headerlink" title="一般我们在项目开发中有时候常会遇到数据库的连接（不使用框架），我们常会在dao类中写一些通用的方法以供后面使用。一般的做法是哪里需要操作数据库的方法哪里就会创建一个对象，然后再引用对象里面的操作方法，这样做的不好的地方就是创建的对象比较多，比较消耗内存，降低程序效率，而我们完全可以只创建一个对象，然后哪里需要哪里就直接用，无需重新创建，这就是单例模式。"></a>一般我们在项目开发中有时候常会遇到数据库的连接（不使用框架），我们常会在dao类中写一些通用的方法以供后面使用。一般的做法是哪里需要操作数据库的方法哪里就会创建一个对象，然后再引用对象里面的操作方法，这样做的不好的地方就是创建的对象比较多，比较消耗内存，降低程序效率，而我们完全可以只创建一个对象，然后哪里需要哪里就直接用，无需重新创建，这就是单例模式。</h4><h3 id="一、懒汉式单例（线程安全）"><a href="#一、懒汉式单例（线程安全）" class="headerlink" title="一、懒汉式单例（线程安全）"></a>一、懒汉式单例（线程安全）</h3><p>懒汉式单例顾名思义，它是驱动型的单例模式。当某个用户（线程）需要某个对象实例时才会去创建，而再未被需要之前不会主动去创建。在一些需要自己创建的工具类时，可以将其定义为一个单例类，因为在整个项目当中工具类只需要创建一次。</p>
<p><strong>优缺点：</strong> 类加载较块，但获取对象较慢（需要先创建，仅针对第一次实例化），需要进行线程同步，保证线程安全。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;<span class="comment">//简单实现一个单例模型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object object=<span class="keyword">new</span> Object();</span><br><span class="line">    <span class="comment">/*私有化构造函数，使得在外部不能创建对象,这是实现单例模式的关键*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">/*获取object对象锁，进行线程同步，在前一个线程未释放该锁时，*/</span></span><br><span class="line">    <span class="comment">/* 其他线程需等待，从而保证线程安全 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">geiInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(util==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object)&#123;</span><br><span class="line">                <span class="keyword">if</span>(util==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    util=<span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> util;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton singleton1 = Singleton.geiInstance();</span><br><span class="line">        Singleton singleton2 = Singleton.geiInstance();</span><br><span class="line">        System.out.println(singleton <span class="number">1</span>==singleton <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：true</span></span><br></pre></td></tr></table></figure></div>


<h2 id="二、饿汉式单例"><a href="#二、饿汉式单例" class="headerlink" title="二、饿汉式单例"></a>二、饿汉式单例</h2><p>饿汉式单例即主动型单例模式，不管用户用不用得到，它都会提前实例化对象等待用户调用。</p>
<p><strong>优缺点：</strong> 在类加载时就已经实例化，因此类加载较慢，但获取对象比较快，不存在线程安不安全的问题。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton  singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton util1= Singleton.getSingleton();</span><br><span class="line">        Singleton util2= Singleton.getSingleton();</span><br><span class="line">        System.out.println(util1==util2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：true</span></span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>Java</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中三种装配bean的方式：自动、Java代码及XML装配</title>
    <url>/Spring%E4%B8%AD%E4%B8%89%E7%A7%8D%E8%A3%85%E9%85%8Dbean%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%9A%E8%87%AA%E5%8A%A8%E3%80%81Java%E4%BB%A3%E7%A0%81%E5%8F%8AXML%E8%A3%85%E9%85%8D/</url>
    <content><![CDATA[<p><strong>推荐使用装配的顺序：自动装配》Java代码》XML装配</strong></p>
<h2 id="一，自动装配"><a href="#一，自动装配" class="headerlink" title="一，自动装配"></a>一，自动装配</h2><p><strong>1、Spring从两个角度实现自动化装配：</strong></p>
<ul>
<li>组件扫描（component scanning）：Spring会自动发现应用上下文中所创建的bean。</li>
<li>自动装配（auto wiring）：Spring自动满足bean之间的依赖。<br><strong>组件扫描和自动装配组合在一起就可以发挥强大的威力，它们能将你的显示配置降到最低。以光盘和播放器为例，具体看以下代码：</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先定义一个CompactDisc 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    <span class="comment">//具体内容不重要</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个CompactDisc实现类</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"popularMusic"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PopularMusic</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"播放流行乐"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//什么都不用写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>到目前为止，上述仅仅是一个孤零零的类，什么也没做。那么我们应该如何使用呢？我们有最一般的方法就是new一个对象出来，然后再调用该对象的play()方法即可。但是用new创建对象的方法在实际的业务代码中增加耦合，难以维护，因此才有了Spring。接下来看一下如何用自动装配的方式装配bean（和普通的Java类，Spring中的特殊称谓），继而使用bean的方法。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单元测试</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = CDPlayerConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CompactDisc cd;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       cd.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果：</span></span><br><span class="line">播放流行乐</span><br></pre></td></tr></table></figure></div>
<p>看完所有代码会发现，上述代码和平时自己写的代码没啥区别，仅仅只多了几个注解（带@符号的），但就是这几个注解起到了作用。你自己并没手动创建一个CompactDisc 对象，而事实的确存在，而且成功运行，这一切都由Spring容器完成。<br><strong>2、几个常用的注解：</strong><br><strong>@Component：</strong> 注解用来说名该类作为一个组件类，并告知Spring要为该类创建bean<br><strong>@Configuration：</strong> 该注解用来说名该类是一个配置类<br><strong>@ComponentScan：</strong> 启用Spring组件扫描（默认不启用），默认扫描与配置类在同一包带        有@ComPonent注解的类。有两个属性：<br>        （1）<strong>basePackages</strong>：用来设置要进行组件扫描的基础包，值为数组，数组属性为字符串<br>        （2）<strong>basePackageClasses</strong>： 设置的数组中包含了类，这些类所在的包将作为组件扫描的基础包<br><strong>@RunWith(SpringJUnit4ClassRunner.class)</strong>：在测试之前自动生成Spring的应用上下文<br><strong>@ContextConfiguration(classes = CDPlayerConfig.class)</strong>：加载配置类。<br><strong>所以上述代码大致的执行原理如下：</strong><br>     首先Spring容器首先加载配置类，根据配置类中的设置再去扫描指定包中的带有@Component的类；然后Spring容器生成扫描到的所有类的对象（默认是单例的），然后根据需要（哪里有@Autowired）自动装配所需要的bean，至于bean的生命周期则由Spring管理。</p>
<h2 id="二、Java代码装配"><a href="#二、Java代码装配" class="headerlink" title="二、Java代码装配"></a>二、Java代码装配</h2><p>要用Java代码来装配bean，那么配置类肯定也是少不了的，一个很简单的配置类定义如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里和上面的配置类不同的地方是这里删除了@ComponentScan注解，因为该注解使用进行设置组件扫描的，而在这里的bean注入是通过Java代码配置的，因此不需要。如果删除之后，再去运行上述的CDPlayerTest的话会报BeanCreationException异常。因为测试期间需要注入的CompactDisc 还未被创建。接下来看一个完整的配置类：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 声明一个简单的bean</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassicalMusic <span class="title">classicalMusic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClassicalMusic();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 声明一个带有依赖对象的bean</span></span><br><span class="line"><span class="comment">    * 在这里通过使用构造器的方式来注入，当spring调用该方法时，它会自动装配一个CompactDisc导配置方法中</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">(CompactDisc compactDisc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(compactDisc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>@Bean注解告诉Spring这个方法将会返回一个对象，该对象将会注册为Spring应用上下文中的bean。默认情况下bean的ID和方法名一致。<br>上述代码中生命了两个bean，即classicalMusic和cdPlayer，前者是一个简单的bean，而后者是一个带有依赖对象的bean，当spring调用该方法时，它会自动装配一个CompactDisc导配置方法中。<br><strong>在这里需要以下三个需要注意的地方：</strong></p>
<ul>
<li>在声明带有依赖对象的bean时，必须首先声明被依赖的bean，即这里的classicalMusic（ClassicalMusic 实现了CompactDisc ）。</li>
<li>这里生成的bean是单例的，若你再声明一个实现了CompactDisc 接口的bean时，则会报错。</li>
<li>带有@Bean注解的方法可以采用任何必要的Java功能来产生bean实例（构造器和Setter方法是@Bean方法的简单样例）。</li>
</ul>
<p>既然上述代码已经配置好了，接下来接看一下如何使用已经配置好的bean，代码如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext configApplicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(JavaConfig.class);</span><br><span class="line">        CompactDisc compactDisc = (ClassicalMusic)configApplicationContext.getBean(<span class="string">"classicalMusic"</span>);</span><br><span class="line">        compactDisc.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">播放古典音乐</span><br></pre></td></tr></table></figure></div>

<p><strong>上述代码大致的执行原理如下：</strong></p>
<p>通过创建AnnotationConfigApplicationContext 对象来配置后的Spring上下文，然后利用上下文来获取对应的bean，继而使用对应的方法。</p>
<h2 id="三、XML装配"><a href="#三、XML装配" class="headerlink" title="三、XML装配"></a>三、XML装配</h2><p><strong>1、借助构造器注入初始化bean</strong><br>两种基本的配置方式：</p>
<ul>
<li>constructor-arg 元素</li>
<li>使用Spring3.0中引入的c-命名空间</li>
</ul>
<p><strong>两者的区别在很大程度上就是是否繁琐以及c-命名空间不能注入集合。</strong><br>下面来看一下一课程-老师的例子做个简单说明：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//课程类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">    String courseName;</span><br><span class="line">    <span class="keyword">double</span> mark;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(String courseName, <span class="keyword">double</span> mark)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courseName = courseName;</span><br><span class="line">        <span class="keyword">this</span>.mark = mark;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//老师类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Course course;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(Course course)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.course = course;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我教的课程："</span>+course.courseName+<span class="string">" 绩点为："</span>+course.mark);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置文件</span></span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line">    &lt;!--Course bean--&gt;</span><br><span class="line">    &lt;bean id = <span class="string">"course"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tyf.day4.Course"</span>&gt;</span><br><span class="line">        &lt;constructor-arg value=<span class="string">"数学"</span> /&gt;</span><br><span class="line">        &lt;constructor-arg value=<span class="string">"4.0"</span> /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Teacher bean--&gt;</span><br><span class="line">    &lt;bean id = <span class="string">"teacher"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tyf.day4.Teacher"</span>&gt;</span><br><span class="line">        &lt;constructor-arg ref=<span class="string">"course"</span> /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context =<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com\\tyf\\day4\\ config.xml"</span>);</span><br><span class="line">        Teacher teacher = (Teacher) context.getBean(<span class="string">"teacher"</span>);</span><br><span class="line">        teacher.teach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">我教的课程：数学 绩点为：<span class="number">4.0</span></span><br></pre></td></tr></table></figure></div>

<p>上述代码仅仅说明了一个使用<constructor-arg>元素进行构造器注入初始化bean的一个很简单的方法，接下来再看一下如何使用c-命名空间来初始化bean（仅展示xml配置文件）。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:c=<span class="string">"http://www.springframework.org/schema/c"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line">    &lt;!--Course bean--&gt;</span><br><span class="line">    &lt;bean id = <span class="string">"course"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tyf.day4.Course"</span>&gt;</span><br><span class="line">        &lt;constructor-arg value=<span class="string">"数学"</span> /&gt;</span><br><span class="line">        &lt;constructor-arg value=<span class="string">"4.0"</span> /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Teacher bean--&gt;</span><br><span class="line">    &lt;bean id = <span class="string">"teacher"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tyf.day4.Teacher"</span> c:_0-ref = <span class="string">"course"</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>可以看出使用c:-命名空间使得xml配置很简洁，易于读懂。_0说的是构造器中第一个参数，同理_1说的是构造器中第二个参数，一次类推。<br>那么如果构造器参数列表中有集合类型，则不能使用c:-命名空间，只能使用<constructor-arg>元素。假如课程中有一个选课学生名字并且使用构造器来注入该属性：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//课程类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">    String courseName;</span><br><span class="line">    <span class="keyword">double</span> mark;</span><br><span class="line">    List&lt;String&gt; students;<span class="comment">//选课学生姓名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(String courseName, <span class="keyword">double</span> mark,List&lt;String&gt; studenets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courseName = courseName;</span><br><span class="line">        <span class="keyword">this</span>.mark = mark;</span><br><span class="line">        <span class="keyword">this</span>.students = studenets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//教师类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Course course;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(Course course)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.course = course;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我教的课程："</span>+course.courseName+<span class="string">" 绩点为："</span>+course.mark);</span><br><span class="line">        System.out.println(<span class="string">"选课学生："</span>);</span><br><span class="line">        <span class="keyword">for</span>(String name:course.students)&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类不变</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//xml配置文件</span></span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:c=<span class="string">"http://www.springframework.org/schema/c"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line">    &lt;!--Course bean--&gt;</span><br><span class="line">    &lt;bean id = <span class="string">"course"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tyf.day4.Course"</span>&gt;</span><br><span class="line">        &lt;constructor-arg value=<span class="string">"数学"</span> /&gt;</span><br><span class="line">        &lt;constructor-arg value=<span class="string">"4.0"</span> /&gt;</span><br><span class="line">        &lt;constructor-arg&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;Yafeng&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;Xiaoshuang&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/constructor-arg&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--Teacher bean--&gt;</span><br><span class="line">    &lt;bean id = <span class="string">"teacher"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tyf.day4.Teacher"</span> c:_0-ref = <span class="string">"course"</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">我教的课程：数学 绩点为：<span class="number">4.0</span></span><br><span class="line">选课学生：</span><br><span class="line">Yafeng</span><br><span class="line">Xiaoshuang</span><br></pre></td></tr></table></figure></div>

<p>从上述代码可以看出，list 是作为Constructor的一个子元素来进行工作的，list中又有value子元素用来给List中的属性赋值。</p>
<p><strong>2、通过Setter方法注入属性</strong></p>
<p>将Teacher类改为如下（其他不变）：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//老师类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">implements</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Course course;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourse</span><span class="params">(Course course)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.course = course;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我教的课程："</span>+course.courseName+<span class="string">" 绩点为："</span>+course.mark);</span><br><span class="line">        System.out.println(<span class="string">"选课学生："</span>);</span><br><span class="line">        <span class="keyword">for</span>(String name:course.students)&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//XML文件中改变的部分</span></span><br><span class="line">&lt;!--Teacher bean--&gt;</span><br><span class="line">&lt;bean id = <span class="string">"teacher"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tyf.day4.Teacher"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"course"</span> ref=<span class="string">"course"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>这里注入属性的时候用的是property,其它基本和constructor基本一样。而构造器注入有c-命名空间，而Sertter属性注入方法也有一个p-命名空间，用法和c-命名空间一致。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Spring依赖注入</title>
    <url>/%E5%88%9D%E8%AF%86Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="一、Spring之DI（IOC）"><a href="#一、Spring之DI（IOC）" class="headerlink" title="一、Spring之DI（IOC）"></a>一、Spring之DI（IOC）</h2><p>DI即Dependencyinjection（依赖注入**），IOC即Inversion of Control（控制反转）。这里的DI和IOC其实是一个意思，即对同一个问题不同角度的回答，侧重点有所不同。DI侧重的是“注入”，而IOC的侧重点则是“反转”,两者没有本质区别，都是为了降低代码耦合度，增加项目可维护性。</p>
<h2 id="1、DI"><a href="#1、DI" class="headerlink" title="1、DI"></a>1、DI</h2><p>依赖注入侧重的是注入，即程序在在运行之前都不知道其依赖的对象具体是什么，当程序运行时需要什么则Spring容器会给你注入什么（Java反射机制）。它仅仅告诉你多模块之间是如何依赖的，但不会告诉你它们如何做，对象无需自行创建或管理它们的依赖关系。依赖注入会将以来的关系自动交给目标对象，而不用对象自己去获取。</p>
<h2 id="2、IOC"><a href="#2、IOC" class="headerlink" title="2、IOC"></a>2、IOC</h2><p>IOC则注重的是反转，这里反转的是依赖对象的创建。对于普通的两个模块之间，依赖对象的创建由被依赖对象创建完成；而有了IOC之后，依赖对象的创建由Spring容器完成，无需再用被依赖对象创建，即被依赖对象的创建权反转。</p>
<h2 id="3、DI-IOC-的作用"><a href="#3、DI-IOC-的作用" class="headerlink" title="3、DI(IOC)的作用"></a>3、DI(IOC)的作用</h2><p>降低耦合度，增加代码的可维护性，可复用性，同时有利于单元测试，但是要想完全不耦合也是不可能，要想实现一定的功能，耦合又是必然的。看下面的例子： 假如现在有一些订单数据要插入SQLServer中，你可以按下面方式写</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//操作数据库（模拟）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"向SQL Server中插入数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用对应类中的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SqlServer sqlServer = <span class="keyword">new</span> SqlServer();</span><br><span class="line">        sqlServer.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>按上述代码写完全没毛病，但是当数据库换成Oracle了之后呢？那么你是不是同时既要改SqlServer和Order中的代码，如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//操作数据库（模拟）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Oracle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"向Oracle 中插入数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用对应类中的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Oracle oracle = <span class="keyword">new</span> Oracle ();</span><br><span class="line">        oracle .insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当你改完之后数据库又换成db了，那你还要继续这样改嘛？虽然说上面代码很容易改，但是真正到实际项目中时就不会这么简单了，光改代码就得累死人。 那么最理想的代码应该怎么写？如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数据库操作通用接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataBase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String database)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlServer</span> <span class="keyword">implements</span> <span class="title">DataBase</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String database)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"向"</span>+database+<span class="string">"中插入数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造器注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">   DataBase dataBase;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(DataBase dataBase)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.dataBase = dataBase;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderInsert</span><span class="params">(String dataBaseName)</span></span>&#123;</span><br><span class="line">       dataBase.insert(dataBaseName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   String dataBaseName = <span class="string">"SqlServer"</span>;</span><br><span class="line">    DataBase dataBase = <span class="keyword">new</span> SqlServer();</span><br><span class="line">    Order order = <span class="keyword">new</span> Order(dataBase);</span><br><span class="line">    order.orderInsert(dataBaseName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这时候无论你是换成什么数据库，我只需添加对相应数据库的操作类即可，Order订单类已经无需再更改，从而降低模块之间的耦合度，提高模块的可复用性。这也比较符合设计模式当中的“开闭原则”，即对拓展开放，对更改关闭。在上述的例子当中展示的是几种注入方式当中的构造器注入。下面再来看一下另一种注入方式：属性注入（Order类如下，其他不变）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">   DataBase dataBase;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataBase</span><span class="params">(DataBase dataBase)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.dataBase = dataBase;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderInsert</span><span class="params">(String dataBaseName)</span></span>&#123;</span><br><span class="line">       dataBase.insert(dataBaseName);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       String dataBaseName = <span class="string">"SqlServer"</span>;</span><br><span class="line">        DataBase dataBase = <span class="keyword">new</span> SqlServer();</span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        order.setDataBase(dataBase);</span><br><span class="line">        order.orderInsert(dataBaseName);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>上述就是依赖注入的另一种方式即属性注入。需要注意的是前面所说的注入的依赖是我自己手动来创建的，而在Spring中对象的创建，管理等均由Spring容器来完成，无需我们手动创建。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级1044：火星数字</title>
    <url>/PAT%E4%B9%99%E7%BA%A71044%EF%BC%9A%E7%81%AB%E6%98%9F%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<ul>
<li>地球人的 0 被火星人称为 tret。</li>
<li>地球人数字 1 到 12 的火星文分别为：jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec。</li>
<li>火星人将进位以后的 12 个高位数字分别称为：tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou。</li>
<li>例如地球人的数字 29 翻译成火星文就是 hel mar；而火星文 elo nov 对应地球数字 115。为了方便交流，请你编写程序实现地球和火星数字之间的互译。<h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2></li>
</ul>
<p>输入第一行给出一个正整数 N（&lt;100），随后 N 行，每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文。</p>
<h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>对应输入的每一行，在一行中输出翻译后的另一种语言的数字。</p>
<h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">29</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">elo nov</span><br><span class="line">tam</span><br></pre></td></tr></table></figure></div>

<h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line">hel mar</span><br><span class="line">may</span><br><span class="line"><span class="number">115</span></span><br><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure></div>

<h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> a[<span class="number">13</span>] = &#123;<span class="string">"tret"</span>, <span class="string">"jan"</span>, <span class="string">"feb"</span>, <span class="string">"mar"</span>, <span class="string">"apr"</span>, <span class="string">"may"</span>, <span class="string">"jun"</span>, <span class="string">"jly"</span>, <span class="string">"aug"</span>, <span class="string">"sep"</span>, <span class="string">"oct"</span>, <span class="string">"nov"</span>, <span class="string">"dec"</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> b[<span class="number">13</span>] = &#123;<span class="string">"####"</span>, <span class="string">"tam"</span>, <span class="string">"hel"</span>, <span class="string">"maa"</span>, <span class="string">"huh"</span>, <span class="string">"tou"</span>, <span class="string">"kes"</span>, <span class="string">"hei"</span>, <span class="string">"elo"</span>, <span class="string">"syy"</span>, <span class="string">"lok"</span>, <span class="string">"mer"</span>, <span class="string">"jou"</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">string_to_int</span><span class="params">(<span class="built_in">string</span> str)</span> <span class="comment">//将字符串转换为数字 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		x = x*<span class="number">10</span> + str[i]-<span class="string">'0'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">earth_to_mars</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="comment">//地球数字转换为火星数字 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n/<span class="number">13</span>) <span class="comment">// n/13！=0 说明该数字有进位，找到高位的对应的火星数字输出即可  </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;b[n/<span class="number">13</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>((n/<span class="number">13</span>) &amp;&amp; (n%<span class="number">13</span>)) <span class="comment">// n/13和n%13!=0说明该数字还有低位数字，因此输出一空格 </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(n%<span class="number">13</span>||n==<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;a[n%<span class="number">13</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mars_to_earth</span><span class="params">()</span> <span class="comment">//火星数字转换为地球数字 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s1,s2;</span><br><span class="line">	<span class="keyword">int</span> heigh = <span class="number">0</span>,low = <span class="number">0</span>;</span><br><span class="line">	s1 = str.substr(<span class="number">0</span>,<span class="number">3</span>); <span class="comment">//截取高位火星数字（火星数字均由3个字母构成） </span></span><br><span class="line">	<span class="keyword">if</span>(len&gt;<span class="number">4</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		s2 = str.substr(<span class="number">4</span>,<span class="number">3</span>); <span class="comment">// 截取地位火星数字（若有低位火星数字） </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">12</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(s1 == a[i] || s2 == a[i]) <span class="comment">// 说s1==a[i]时，此火星数字仅有一位数，若 s2==a[i]说明该数字有两位（169以内的数字用两位火星数字即可表示） </span></span><br><span class="line">		&#123;</span><br><span class="line">			low = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(s1  == b[i]) <span class="comment">// 高位数字 </span></span><br><span class="line">		&#123;</span><br><span class="line">			heigh = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;heigh*<span class="number">13</span>+low;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		getline(<span class="built_in">cin</span>,str);</span><br><span class="line">		len = str.length();</span><br><span class="line">		<span class="keyword">if</span>(str[<span class="number">0</span>]&gt;=<span class="string">'0'</span>&amp;&amp;str[<span class="number">0</span>]&lt;=<span class="string">'9'</span>) <span class="comment">//若输入为地球数字，注意火星文仅仅包含英文字母 </span></span><br><span class="line">		&#123;</span><br><span class="line">			earth_to_mars(string_to_int(str));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			mars_to_earth();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>主要算法思想来自于：<a href="https://www.liuchuo.net/archives/581" target="_blank" rel="noopener">柳婼 の blog</a></p>
]]></content>
      <categories>
        <category>C++</category>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>PAT乙级</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟大数除法</title>
    <url>/%E6%A8%A1%E6%8B%9F%E5%A4%A7%E6%95%B0%E9%99%A4%E6%B3%95/</url>
    <content><![CDATA[<a id="more"></a>
<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p> 本题要求计算 A/B，其中 A 是不超过 1000 位的正整数，B 是 1 位正整数。你需要输出商数 Q 和余数 R，使得 A=B×Q+R 成立。</p>
<h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在一行中依次给出 A 和 B，中间以 1 空格分隔。</p>
<h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中依次输出 Q 和 R，中间以 1 空格分隔。</p>
<h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">123456789050987654321</span> <span class="number">7</span></span><br></pre></td></tr></table></figure></div>

<h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">17636684150141093474</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></div>

<p>思想 ：<br>模拟正常的除法运算，从最高位开始每位数字除以除数，若此时能除过，则将该位除的结果输出，并对该位和除数取余，该余数和下一位数又组成一个数，继续除以除数，若能除过则继续上述步骤，否则商补0，向后借一位继续上述步骤，直至被除数最后一位，并输出余数。</p>
<p>AC代码：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">division</span><span class="params">(<span class="keyword">char</span> *A,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(A);</span><br><span class="line">	<span class="keyword">int</span> R;<span class="comment">//余数</span></span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//A[0]为最高位</span></span><br><span class="line">	&#123;</span><br><span class="line">		t = t*<span class="number">10</span>+(A[i]-<span class="string">'0'</span>);</span><br><span class="line">		<span class="keyword">if</span>(t&gt;=m)<span class="comment">//被除数能除过时 </span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;t/m;</span><br><span class="line">			flag = <span class="literal">false</span>;	</span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(!flag)<span class="comment">//被处除数除不过，则向后借一位，同时该位补0(不包括商的最高位) </span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		t=t%m;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(flag)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;	</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;t&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> A[<span class="number">1010</span>];</span><br><span class="line">    <span class="keyword">int</span> B;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;A&gt;&gt;B;</span><br><span class="line">    division(A,B);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>C++</category>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>PAT乙级</tag>
      </tags>
  </entry>
  <entry>
    <title>变量在Java中的运行顺序</title>
    <url>/%E5%8F%98%E9%87%8F%E5%9C%A8Java%E4%B8%AD%E7%9A%84%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<p>   <strong>在Java中，变量的初始化顺序是：静态变量&amp;静态代码块 》变量&amp;普通代码块 》构造器。</strong>之前的一个误区是构造器的执行顺序是仅次于静态变量和静态得代码块的。换个角度想一下，其实很好理解为什么构造器要在最后在执行。因为，假设构造器中需要一个变量，若变量在构造器之后初始化，这就会造成变量未初始化就调用的现象，显然这在任何编程语言中是不允许的（虽然很多语言都有默认的初始值）。下面举一个简单的例子：<br> <a id="more"></a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamerInit</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"普通代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamerInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BaseClasss class_1=<span class="keyword">new</span> BaseClasss(<span class="string">"普通变量"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BaseClasss class_2=<span class="keyword">new</span> BaseClasss(<span class="string">"静态变量"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ParamerInit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line"> 静态代码块</span><br><span class="line"> 静态变量</span><br><span class="line"> 普通代码块 </span><br><span class="line"> 普通变量</span><br><span class="line"> 构造器</span><br></pre></td></tr></table></figure></div>

<p>上述例子当中的变量是一个普通的Java对象，对于其他基本类型的变量同样适用，从结果来看，显然构造器是最后来执行的。需要注意的是静态变量和静态代码块以及普通变量和普通代码块之间的顺序又是怎么样的呢？答案是：和其定义的顺序有关，看如下代码以及执行结果。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamerInit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> BaseClasss class_1=<span class="keyword">new</span> BaseClasss(<span class="string">"普通变量"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BaseClasss class_2=<span class="keyword">new</span> BaseClasss(<span class="string">"静态变量"</span>);</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"普通代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamerInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ParamerInit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">静态变量</span><br><span class="line">静态代码块</span><br><span class="line">普通变量</span><br><span class="line">普通代码块</span><br><span class="line">构造器</span><br></pre></td></tr></table></figure></div>
<p>当我把静态变量和静态代码块以及变量和普通代码块的定义顺序对调之后，得到的结果如上，这说明对于静态的变量和代码块来说，它们之间的执顺序根据其定义顺序而定，同样对于普通变量和代码块来说亦然。</p>
<p>上述结果都是没有继承类，仅在单一类中的变量执行顺序，那么如果有继承类时，子类和父类当中变量执行顺序又是怎样的？</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该类继承自上述父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsClassInit</span> <span class="keyword">extends</span> <span class="title">ParamerInit</span></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"子类---普通代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"子类---静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExtendsClassInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类---构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BaseClasss class_1=<span class="keyword">new</span> BaseClasss(<span class="string">"子类---普通变量"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BaseClasss class_2=<span class="keyword">new</span> BaseClasss(<span class="string">"子类---静态变量"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ExtendsClassInit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">父类---静态变量</span><br><span class="line">父类---静态代码块</span><br><span class="line">子类---静态代码块</span><br><span class="line">子类---静态变量</span><br><span class="line">父类---普通变量</span><br><span class="line">父类---普通代码块</span><br><span class="line">父类---构造器</span><br><span class="line">子类---普通代码块</span><br><span class="line">子类---普通变量</span><br><span class="line">子类---构造器</span><br></pre></td></tr></table></figure></div>

<p>从结果很容易的看到，对于有继承类的变量的初始化顺序是首先初始化父类当中的静态变量和代码块，其次是子类当中的静态变量和代码块，然后继续初始化父类中的普通变量和代码块，最后是子类中的普通变量和代码块。即优先初始化的是父类中的变量。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>计算两个日期之间的天数</title>
    <url>/Java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>思路：</p>
<ol>
<li>同年同月：之间两个天数相减即可，即（day1-day2-1）很简单。</li>
<li>同年不同月：先计算完整月数的天数，即从指定日期的写个月开始计算，计算每个月有多少天，都加起来即可；然后计算指定日期到月初和月末的天数。如2019-6-12和2019-2-3，我们先计算3、4、5这三个完整月份的天数，然后计算6月12日到月初的天数，再计算2月3日到月末的天数，三者加起来就是两日期之间的天数。</li>
<li>年月日都不同：思路和计算不同月的类似。我们可以先计算两个年份之间完整年份的天数，然后再计算较大年份距离年初（1月1日）的天数，再计算较小年份距离年末（12-31）的天数，将三者加起来就是两个日期之间的天数。<a id="more"></a>
下面帖出我自己的代码：<br><img src="https://img-blog.csdnimg.cn/20190313152945838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvZGVyX1lhZmVuZw==,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190313153055453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvZGVyX1lhZmVuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190313153142194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvZGVyX1lhZmVuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190313153312374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvZGVyX1lhZmVuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190313153516136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvZGVyX1lhZmVuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HowManyDays</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> year;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> month;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> day;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> year;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.year = year;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> month;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonth</span><span class="params">(<span class="keyword">int</span> month)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.month = month;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> day;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDay</span><span class="params">(<span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.day = day;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HowManyDays</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.year = year;</span><br><span class="line">		<span class="keyword">this</span>.month = month;</span><br><span class="line">		<span class="keyword">this</span>.day = day;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HowManyDays</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 判断某年是否是闰年</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLeapYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 某年某月 月有多少天</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">daysOfMonth</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(month&gt;<span class="number">12</span>||month&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"日期不合法"</span>);</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">1</span> || month == <span class="number">3</span> || month == <span class="number">5</span> || month == <span class="number">7</span> || month == <span class="number">8</span> || month == <span class="number">10</span> || month == <span class="number">12</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">31</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">4</span> || month == <span class="number">6</span> || month == <span class="number">9</span> || month == <span class="number">11</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeapYear(year) &amp;&amp; month == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">29</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;<span class="comment">// 非闰年二月28天</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">28</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 计算机本年一共多少天</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">daysOfYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">		result = <span class="number">7</span> * <span class="number">31</span> + <span class="number">4</span> * <span class="number">30</span>;<span class="comment">// 不包括闰月</span></span><br><span class="line">		<span class="keyword">if</span> (isLeapYear(year)) &#123;</span><br><span class="line">			result += <span class="number">29</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			result += <span class="number">28</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 计算指定日期到年初的天数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">daysOfYearThis</span><span class="params">(HowManyDays date)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> year=date.getYear();</span><br><span class="line">		<span class="keyword">int</span> month=date.getMonth();</span><br><span class="line">		<span class="keyword">int</span> day=date.getDay();</span><br><span class="line">		<span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> month2 = <span class="number">1</span>;<span class="comment">// 该年的元月</span></span><br><span class="line">		<span class="keyword">if</span>(year&lt;<span class="number">0</span>||month&gt;<span class="number">12</span>||month&lt;<span class="number">0</span>||day&gt;<span class="number">31</span>||day&lt;<span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"日期不合法"</span>);</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (month != month2) &#123;</span><br><span class="line">			result += daysOfMonth(year, month2);</span><br><span class="line">			month2++;</span><br><span class="line">		&#125;</span><br><span class="line">		result = result + day;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 计算指定日期到年末的天数</span></span><br><span class="line"><span class="comment">	 * 思路：先算完整的月份，即从当前日期的下一个月算起，直到下一年的1月1日，此时算出了下一个月到1月1日之间的天数</span></span><br><span class="line"><span class="comment">	 * 再加上此时日期到月底的天数，从而得到本日期到年末之间的天数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">daysOfYear_Next</span><span class="params">(HowManyDays date)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> year=date.getYear();</span><br><span class="line">		<span class="keyword">int</span> month=date.getMonth();</span><br><span class="line">		<span class="keyword">int</span> day=date.getDay();</span><br><span class="line">		<span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> month2 = <span class="number">1</span>;<span class="comment">// 下一年的元月</span></span><br><span class="line">		<span class="keyword">int</span> m = month;</span><br><span class="line">		<span class="keyword">if</span>(year&lt;<span class="number">0</span>||month&lt;<span class="number">0</span>||month&gt;<span class="number">12</span>||day&gt;<span class="number">31</span>||day&lt;<span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"日期不合法"</span>);</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (month2 != m) &#123;</span><br><span class="line">			m++;<span class="comment">// 先计算下一月到次年1月1日的天数</span></span><br><span class="line">			<span class="keyword">if</span> (m &lt; <span class="number">12</span>) &#123;</span><br><span class="line">				result += daysOfMonth(year, m);</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">12</span>) &#123;<span class="comment">//年内最后一个月</span></span><br><span class="line">				result += daysOfMonth(year, m);<span class="comment">//计算12月份天数</span></span><br><span class="line">				result += daysOfMonth(year, month) - day;<span class="comment">//daysOfMonth(year, month) - day计算指定日期到月末天数</span></span><br><span class="line">				m = <span class="number">1</span>;<span class="comment">//循环结束</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * date1&gt;date2</span></span><br><span class="line"><span class="comment">	 * */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">how_many_day</span><span class="params">(HowManyDays date1,HowManyDays date2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> m1, m2, y1, y2;</span><br><span class="line">		<span class="comment">//exchange(date1, date2);</span></span><br><span class="line">		<span class="comment">//System.out.println(date1.getYear()+""+date1.getMonth()+" "+date1.getDay());</span></span><br><span class="line">		m1 = date1.getMonth();</span><br><span class="line">		m2 = date2.getMonth();</span><br><span class="line">		y1 = date1.getYear();</span><br><span class="line">		y2 = date2.getYear();</span><br><span class="line">		<span class="keyword">if</span> (date1.getYear() == date2.getYear() &amp;&amp; date1.getMonth() == date2.getMonth()) &#123;<span class="comment">// 同年同月</span></span><br><span class="line">			result = Math.abs(date1.getDay() - date2.getDay());<span class="comment">//直接计算日期天数之间的差值</span></span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (date1.getYear() == date2.getDay()) &#123;<span class="comment">// 同年不同月</span></span><br><span class="line">			<span class="keyword">while</span> ((m2 + <span class="number">1</span>) != m1) &#123;</span><br><span class="line">				result += daysOfMonth(date2.getYear(), m2);</span><br><span class="line">				m2++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * daysOfMonth(year2, month2)-day2-1 计算较小月距离月末还有多少天</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			result = result + date1.getDay() + daysOfMonth(date2.getYear(), date2.getMonth()) - date2.getDay() - <span class="number">1</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;<span class="comment">// 不同年，不同月</span></span><br><span class="line">			<span class="keyword">while</span> (y1 != (y2+<span class="number">1</span>)) &#123;<span class="comment">//计算完整年的所有天数</span></span><br><span class="line">				result += daysOfYear(y2);</span><br><span class="line">				y2++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * 在所有完整年计算完之后，再加上较大年份距离年初的天数和较小年份到年初的天数</span></span><br><span class="line"><span class="comment">			 * */</span></span><br><span class="line">			result += daysOfYearThis(date1) + daysOfYear_Next(date2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String ags[])</span> </span>&#123;</span><br><span class="line">		HowManyDays hd = <span class="keyword">new</span> HowManyDays();</span><br><span class="line">		HowManyDays date1=<span class="keyword">new</span> HowManyDays(<span class="number">2019</span>,<span class="number">10</span>,<span class="number">13</span>);</span><br><span class="line">		HowManyDays date2=<span class="keyword">new</span> HowManyDays(<span class="number">2017</span>, <span class="number">10</span>, <span class="number">12</span>);</span><br><span class="line">		<span class="keyword">int</span> days = hd.how_many_day(date1,date2);</span><br><span class="line">		System.out.println(days);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试知识点</tag>
      </tags>
  </entry>
</search>
