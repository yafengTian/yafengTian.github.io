<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>码农峰酱个人博客</title>
  
  <subtitle>深居秦岭脚下的码农峰酱</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yafengshuanger.cn/"/>
  <updated>2019-10-30T02:53:28.021Z</updated>
  <id>http://yafengshuanger.cn/</id>
  
  <author>
    <name>亚峰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring中三种装配bean的方式：自动、Java代码及XML装配</title>
    <link href="http://yafengshuanger.cn/2019/10/30/Spring%E4%B8%AD%E4%B8%89%E7%A7%8D%E8%A3%85%E9%85%8Dbean%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%9A%E8%87%AA%E5%8A%A8%E3%80%81Java%E4%BB%A3%E7%A0%81%E5%8F%8AXML%E8%A3%85%E9%85%8D/"/>
    <id>http://yafengshuanger.cn/2019/10/30/Spring中三种装配bean的方式：自动、Java代码及XML装配/</id>
    <published>2019-10-30T02:41:59.000Z</published>
    <updated>2019-10-30T02:53:28.021Z</updated>
    
    <content type="html"><![CDATA[<p><strong>推荐使用装配的顺序：自动装配》Java代码》XML装配</strong></p><h2 id="一，自动装配"><a href="#一，自动装配" class="headerlink" title="一，自动装配"></a>一，自动装配</h2><p><strong>1、Spring从两个角度实现自动化装配：</strong></p><ul><li>组件扫描（component scanning）：Spring会自动发现应用上下文中所创建的bean。</li><li>自动装配（auto wiring）：Spring自动满足bean之间的依赖。<br><strong>组件扫描和自动装配组合在一起就可以发挥强大的威力，它们能将你的显示配置降到最低。以光盘和播放器为例，具体看以下代码：</strong></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先定义一个CompactDisc 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    <span class="comment">//具体内容不重要</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个CompactDisc实现类</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"popularMusic"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PopularMusic</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"播放流行乐"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//什么都不用写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>到目前为止，上述仅仅是一个孤零零的类，什么也没做。那么我们应该如何使用呢？我们有最一般的方法就是new一个对象出来，然后再调用该对象的play()方法即可。但是用new创建对象的方法在实际的业务代码中增加耦合，难以维护，因此才有了Spring。接下来看一下如何用自动装配的方式装配bean（和普通的Java类，Spring中的特殊称谓），继而使用bean的方法。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单元测试</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = CDPlayerConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CompactDisc cd;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       cd.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果：</span></span><br><span class="line">播放流行乐</span><br></pre></td></tr></table></figure></div><p>看完所有代码会发现，上述代码和平时自己写的代码没啥区别，仅仅只多了几个注解（带@符号的），但就是这几个注解起到了作用。你自己并没手动创建一个CompactDisc 对象，而事实的确存在，而且成功运行，这一切都由Spring容器完成。<br><strong>2、几个常用的注解：</strong><br><strong>@Component：</strong> 注解用来说名该类作为一个组件类，并告知Spring要为该类创建bean<br><strong>@Configuration：</strong> 该注解用来说名该类是一个配置类<br><strong>@ComponentScan：</strong> 启用Spring组件扫描（默认不启用），默认扫描与配置类在同一包带        有@ComPonent注解的类。有两个属性：<br>        （1）<strong>basePackages</strong>：用来设置要进行组件扫描的基础包，值为数组，数组属性为字符串<br>        （2）<strong>basePackageClasses</strong>： 设置的数组中包含了类，这些类所在的包将作为组件扫描的基础包<br><strong>@RunWith(SpringJUnit4ClassRunner.class)</strong>：在测试之前自动生成Spring的应用上下文<br><strong>@ContextConfiguration(classes = CDPlayerConfig.class)</strong>：加载配置类。<br><strong>所以上述代码大致的执行原理如下：</strong><br>     首先Spring容器首先加载配置类，根据配置类中的设置再去扫描指定包中的带有@Component的类；然后Spring容器生成扫描到的所有类的对象（默认是单例的），然后根据需要（哪里有@Autowired）自动装配所需要的bean，至于bean的生命周期则由Spring管理。</p><h2 id="二、Java代码装配"><a href="#二、Java代码装配" class="headerlink" title="二、Java代码装配"></a>二、Java代码装配</h2><p>要用Java代码来装配bean，那么配置类肯定也是少不了的，一个很简单的配置类定义如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这里和上面的配置类不同的地方是这里删除了@ComponentScan注解，因为该注解使用进行设置组件扫描的，而在这里的bean注入是通过Java代码配置的，因此不需要。如果删除之后，再去运行上述的CDPlayerTest的话会报BeanCreationException异常。因为测试期间需要注入的CompactDisc 还未被创建。接下来看一个完整的配置类：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 声明一个简单的bean</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassicalMusic <span class="title">classicalMusic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClassicalMusic();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 声明一个带有依赖对象的bean</span></span><br><span class="line"><span class="comment">    * 在这里通过使用构造器的方式来注入，当spring调用该方法时，它会自动装配一个CompactDisc导配置方法中</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CDPlayer <span class="title">cdPlayer</span><span class="params">(CompactDisc compactDisc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CDPlayer(compactDisc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>@Bean注解告诉Spring这个方法将会返回一个对象，该对象将会注册为Spring应用上下文中的bean。默认情况下bean的ID和方法名一致。<br>上述代码中生命了两个bean，即classicalMusic和cdPlayer，前者是一个简单的bean，而后者是一个带有依赖对象的bean，当spring调用该方法时，它会自动装配一个CompactDisc导配置方法中。<br><strong>在这里需要以下三个需要注意的地方：</strong></p><ul><li>在声明带有依赖对象的bean时，必须首先声明被依赖的bean，即这里的classicalMusic（ClassicalMusic 实现了CompactDisc ）。</li><li>这里生成的bean是单例的，若你再声明一个实现了CompactDisc 接口的bean时，则会报错。</li><li>带有@Bean注解的方法可以采用任何必要的Java功能来产生bean实例（构造器和Setter方法是@Bean方法的简单样例）。</li></ul><p>既然上述代码已经配置好了，接下来接看一下如何使用已经配置好的bean，代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext configApplicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(JavaConfig.class);</span><br><span class="line">        CompactDisc compactDisc = (ClassicalMusic)configApplicationContext.getBean(<span class="string">"classicalMusic"</span>);</span><br><span class="line">        compactDisc.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">播放古典音乐</span><br></pre></td></tr></table></figure></div><p><strong>上述代码大致的执行原理如下：</strong></p><p>通过创建AnnotationConfigApplicationContext 对象来配置后的Spring上下文，然后利用上下文来获取对应的bean，继而使用对应的方法。</p><h2 id="三、XML装配"><a href="#三、XML装配" class="headerlink" title="三、XML装配"></a>三、XML装配</h2><p><strong>1、借助构造器注入初始化bean</strong><br>两种基本的配置方式：</p><ul><li>constructor-arg 元素</li><li>使用Spring3.0中引入的c-命名空间</li></ul><p><strong>两者的区别在很大程度上就是是否繁琐以及c-命名空间不能注入集合。</strong><br>下面来看一下一课程-老师的例子做个简单说明：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//课程类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">    String courseName;</span><br><span class="line">    <span class="keyword">double</span> mark;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(String courseName, <span class="keyword">double</span> mark)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courseName = courseName;</span><br><span class="line">        <span class="keyword">this</span>.mark = mark;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//老师类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Course course;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(Course course)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.course = course;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我教的课程："</span>+course.courseName+<span class="string">" 绩点为："</span>+course.mark);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置文件</span></span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line">    &lt;!--Course bean--&gt;</span><br><span class="line">    &lt;bean id = <span class="string">"course"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tyf.day4.Course"</span>&gt;</span><br><span class="line">        &lt;constructor-arg value=<span class="string">"数学"</span> /&gt;</span><br><span class="line">        &lt;constructor-arg value=<span class="string">"4.0"</span> /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Teacher bean--&gt;</span><br><span class="line">    &lt;bean id = <span class="string">"teacher"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tyf.day4.Teacher"</span>&gt;</span><br><span class="line">        &lt;constructor-arg ref=<span class="string">"course"</span> /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context =<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com\\tyf\\day4\\ config.xml"</span>);</span><br><span class="line">        Teacher teacher = (Teacher) context.getBean(<span class="string">"teacher"</span>);</span><br><span class="line">        teacher.teach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">我教的课程：数学 绩点为：<span class="number">4.0</span></span><br></pre></td></tr></table></figure></div><p>上述代码仅仅说明了一个使用<constructor-arg>元素进行构造器注入初始化bean的一个很简单的方法，接下来再看一下如何使用c-命名空间来初始化bean（仅展示xml配置文件）。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:c=<span class="string">"http://www.springframework.org/schema/c"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line">    &lt;!--Course bean--&gt;</span><br><span class="line">    &lt;bean id = <span class="string">"course"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tyf.day4.Course"</span>&gt;</span><br><span class="line">        &lt;constructor-arg value=<span class="string">"数学"</span> /&gt;</span><br><span class="line">        &lt;constructor-arg value=<span class="string">"4.0"</span> /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Teacher bean--&gt;</span><br><span class="line">    &lt;bean id = <span class="string">"teacher"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tyf.day4.Teacher"</span> c:_0-ref = <span class="string">"course"</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>可以看出使用c:-命名空间使得xml配置很简洁，易于读懂。_0说的是构造器中第一个参数，同理_1说的是构造器中第二个参数，一次类推。<br>那么如果构造器参数列表中有集合类型，则不能使用c:-命名空间，只能使用<constructor-arg>元素。假如课程中有一个选课学生名字并且使用构造器来注入该属性：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//课程类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">    String courseName;</span><br><span class="line">    <span class="keyword">double</span> mark;</span><br><span class="line">    List&lt;String&gt; students;<span class="comment">//选课学生姓名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(String courseName, <span class="keyword">double</span> mark,List&lt;String&gt; studenets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courseName = courseName;</span><br><span class="line">        <span class="keyword">this</span>.mark = mark;</span><br><span class="line">        <span class="keyword">this</span>.students = studenets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//教师类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Course course;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(Course course)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.course = course;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我教的课程："</span>+course.courseName+<span class="string">" 绩点为："</span>+course.mark);</span><br><span class="line">        System.out.println(<span class="string">"选课学生："</span>);</span><br><span class="line">        <span class="keyword">for</span>(String name:course.students)&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类不变</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//xml配置文件</span></span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:c=<span class="string">"http://www.springframework.org/schema/c"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line">    &lt;!--Course bean--&gt;</span><br><span class="line">    &lt;bean id = <span class="string">"course"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tyf.day4.Course"</span>&gt;</span><br><span class="line">        &lt;constructor-arg value=<span class="string">"数学"</span> /&gt;</span><br><span class="line">        &lt;constructor-arg value=<span class="string">"4.0"</span> /&gt;</span><br><span class="line">        &lt;constructor-arg&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;Yafeng&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;Xiaoshuang&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/constructor-arg&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--Teacher bean--&gt;</span><br><span class="line">    &lt;bean id = <span class="string">"teacher"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tyf.day4.Teacher"</span> c:_0-ref = <span class="string">"course"</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">我教的课程：数学 绩点为：<span class="number">4.0</span></span><br><span class="line">选课学生：</span><br><span class="line">Yafeng</span><br><span class="line">Xiaoshuang</span><br></pre></td></tr></table></figure></div><p>从上述代码可以看出，list 是作为Constructor的一个子元素来进行工作的，list中又有value子元素用来给List中的属性赋值。</p><p><strong>2、通过Setter方法注入属性</strong></p><p>将Teacher类改为如下（其他不变）：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//老师类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">implements</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Course course;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourse</span><span class="params">(Course course)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.course = course;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我教的课程："</span>+course.courseName+<span class="string">" 绩点为："</span>+course.mark);</span><br><span class="line">        System.out.println(<span class="string">"选课学生："</span>);</span><br><span class="line">        <span class="keyword">for</span>(String name:course.students)&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//XML文件中改变的部分</span></span><br><span class="line">&lt;!--Teacher bean--&gt;</span><br><span class="line">&lt;bean id = <span class="string">"teacher"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tyf.day4.Teacher"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"course"</span> ref=<span class="string">"course"</span> /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>这里注入属性的时候用的是property,其它基本和constructor基本一样。而构造器注入有c-命名空间，而Sertter属性注入方法也有一个p-命名空间，用法和c-命名空间一致。</p>]]></content>
    
    <summary type="html">
    
      组件扫描（component scanning）：Spring会自动发现应用上下文中所创建的bean。自动装配（auto wiring）：Spring自动满足bean之间的依赖。**组件扫描和自动装配组合在一起就可以发挥强大的威力，它们能将你的显示配置降到最低。以光盘和播放器为例，具体看以下代码：**
    
    </summary>
    
    
      <category term="Java" scheme="http://yafengshuanger.cn/categories/Java/"/>
    
      <category term="Spring" scheme="http://yafengshuanger.cn/categories/Java/Spring/"/>
    
    
      <category term="Java" scheme="http://yafengshuanger.cn/tags/Java/"/>
    
      <category term="Spring" scheme="http://yafengshuanger.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>初识Spring依赖注入</title>
    <link href="http://yafengshuanger.cn/2019/10/26/%E5%88%9D%E8%AF%86Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>http://yafengshuanger.cn/2019/10/26/初识Spring依赖注入/</id>
    <published>2019-10-26T14:44:12.000Z</published>
    <updated>2019-10-26T14:44:12.357Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>PAT乙级1044：火星数字</title>
    <link href="http://yafengshuanger.cn/2019/10/23/PAT%E4%B9%99%E7%BA%A71044%EF%BC%9A%E7%81%AB%E6%98%9F%E6%95%B0%E5%AD%97/"/>
    <id>http://yafengshuanger.cn/2019/10/23/PAT乙级1044：火星数字/</id>
    <published>2019-10-23T14:22:56.000Z</published>
    <updated>2019-10-23T15:04:42.910Z</updated>
    
    <content type="html"><![CDATA[<ul><li>地球人的 0 被火星人称为 tret。</li><li>地球人数字 1 到 12 的火星文分别为：jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec。</li><li>火星人将进位以后的 12 个高位数字分别称为：tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou。</li><li>例如地球人的数字 29 翻译成火星文就是 hel mar；而火星文 elo nov 对应地球数字 115。为了方便交流，请你编写程序实现地球和火星数字之间的互译。<h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2></li></ul><p>输入第一行给出一个正整数 N（&lt;100），随后 N 行，每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文。</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>对应输入的每一行，在一行中输出翻译后的另一种语言的数字。</p><h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">29</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">elo nov</span><br><span class="line">tam</span><br></pre></td></tr></table></figure></div><h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hel mar</span><br><span class="line">may</span><br><span class="line"><span class="number">115</span></span><br><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure></div><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> a[<span class="number">13</span>] = &#123;<span class="string">"tret"</span>, <span class="string">"jan"</span>, <span class="string">"feb"</span>, <span class="string">"mar"</span>, <span class="string">"apr"</span>, <span class="string">"may"</span>, <span class="string">"jun"</span>, <span class="string">"jly"</span>, <span class="string">"aug"</span>, <span class="string">"sep"</span>, <span class="string">"oct"</span>, <span class="string">"nov"</span>, <span class="string">"dec"</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> b[<span class="number">13</span>] = &#123;<span class="string">"####"</span>, <span class="string">"tam"</span>, <span class="string">"hel"</span>, <span class="string">"maa"</span>, <span class="string">"huh"</span>, <span class="string">"tou"</span>, <span class="string">"kes"</span>, <span class="string">"hei"</span>, <span class="string">"elo"</span>, <span class="string">"syy"</span>, <span class="string">"lok"</span>, <span class="string">"mer"</span>, <span class="string">"jou"</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">string_to_int</span><span class="params">(<span class="built_in">string</span> str)</span> <span class="comment">//将字符串转换为数字 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">x = x*<span class="number">10</span> + str[i]-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">earth_to_mars</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="comment">//地球数字转换为火星数字 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n/<span class="number">13</span>) <span class="comment">// n/13！=0 说明该数字有进位，找到高位的对应的火星数字输出即可  </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;b[n/<span class="number">13</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((n/<span class="number">13</span>) &amp;&amp; (n%<span class="number">13</span>)) <span class="comment">// n/13和n%13!=0说明该数字还有低位数字，因此输出一空格 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">13</span>||n==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[n%<span class="number">13</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mars_to_earth</span><span class="params">()</span> <span class="comment">//火星数字转换为地球数字 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1,s2;</span><br><span class="line"><span class="keyword">int</span> heigh = <span class="number">0</span>,low = <span class="number">0</span>;</span><br><span class="line">s1 = str.substr(<span class="number">0</span>,<span class="number">3</span>); <span class="comment">//截取高位火星数字（火星数字均由3个字母构成） </span></span><br><span class="line"><span class="keyword">if</span>(len&gt;<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">s2 = str.substr(<span class="number">4</span>,<span class="number">3</span>); <span class="comment">// 截取地位火星数字（若有低位火星数字） </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">12</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s1 == a[i] || s2 == a[i]) <span class="comment">// 说s1==a[i]时，此火星数字仅有一位数，若 s2==a[i]说明该数字有两位（169以内的数字用两位火星数字即可表示） </span></span><br><span class="line">&#123;</span><br><span class="line">low = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s1  == b[i]) <span class="comment">// 高位数字 </span></span><br><span class="line">&#123;</span><br><span class="line">heigh = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;heigh*<span class="number">13</span>+low;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">getline(<span class="built_in">cin</span>,str);</span><br><span class="line">len = str.length();</span><br><span class="line"><span class="keyword">if</span>(str[<span class="number">0</span>]&gt;=<span class="string">'0'</span>&amp;&amp;str[<span class="number">0</span>]&lt;=<span class="string">'9'</span>) <span class="comment">//若输入为地球数字，注意火星文仅仅包含英文字母 </span></span><br><span class="line">&#123;</span><br><span class="line">earth_to_mars(string_to_int(str));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mars_to_earth();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>主要算法思想来自于：<a href="https://www.liuchuo.net/archives/581" target="_blank" rel="noopener">柳婼 の blog</a></p>]]></content>
    
    <summary type="html">
    
      火星人是以 13 进制计数的
- 地球人的 0 被火星人称为 tret。 - 地球人数字 1 到 12 的火星文分别为：jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec。 - 火星人将进位以后的 12 个高位数字分别称为：tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou。 - 例如地球人的数字 29 翻译成火星文就是 hel mar；而火星文 elo nov 对应地球数字 115。为了方便交流，请你编写程序实现地球和火星数字之间的互译。
    
    </summary>
    
    
      <category term="C++" scheme="http://yafengshuanger.cn/categories/C/"/>
    
      <category term="PAT乙级" scheme="http://yafengshuanger.cn/categories/C/PAT%E4%B9%99%E7%BA%A7/"/>
    
    
      <category term="C++" scheme="http://yafengshuanger.cn/tags/C/"/>
    
      <category term="PAT乙级" scheme="http://yafengshuanger.cn/tags/PAT%E4%B9%99%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>模拟大数除法</title>
    <link href="http://yafengshuanger.cn/2019/10/19/%E6%A8%A1%E6%8B%9F%E5%A4%A7%E6%95%B0%E9%99%A4%E6%B3%95/"/>
    <id>http://yafengshuanger.cn/2019/10/19/模拟大数除法/</id>
    <published>2019-10-19T13:06:47.000Z</published>
    <updated>2019-10-19T13:28:30.376Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p> 本题要求计算 A/B，其中 A 是不超过 1000 位的正整数，B 是 1 位正整数。你需要输出商数 Q 和余数 R，使得 A=B×Q+R 成立。</p><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在一行中依次给出 A 和 B，中间以 1 空格分隔。</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中依次输出 Q 和 R，中间以 1 空格分隔。</p><h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123456789050987654321</span> <span class="number">7</span></span><br></pre></td></tr></table></figure></div><h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17636684150141093474</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></div><p>思想 ：<br>模拟正常的除法运算，从最高位开始每位数字除以除数，若此时能除过，则将该位除的结果输出，并对该位和除数取余，该余数和下一位数又组成一个数，继续除以除数，若能除过则继续上述步骤，否则商补0，向后借一位继续上述步骤，直至被除数最后一位，并输出余数。</p><p>AC代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">division</span><span class="params">(<span class="keyword">char</span> *A,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(A);</span><br><span class="line"><span class="keyword">int</span> R;<span class="comment">//余数</span></span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//A[0]为最高位</span></span><br><span class="line">&#123;</span><br><span class="line">t = t*<span class="number">10</span>+(A[i]-<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">if</span>(t&gt;=m)<span class="comment">//被除数能除过时 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;t/m;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!flag)<span class="comment">//被处除数除不过，则向后借一位，同时该位补0(不包括商的最高位) </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t=t%m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;t&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> A[<span class="number">1010</span>];</span><br><span class="line">    <span class="keyword">int</span> B;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;A&gt;&gt;B;</span><br><span class="line">    division(A,B);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      如果给你两个1000位的数字，你怎么得到它们除法的结果？如果你要用普通的出发运算的肯定是行不通的~所以这算是一种比较理想的计算方法。
    
    </summary>
    
    
      <category term="C++" scheme="http://yafengshuanger.cn/categories/C/"/>
    
      <category term="PAT乙级" scheme="http://yafengshuanger.cn/categories/C/PAT%E4%B9%99%E7%BA%A7/"/>
    
    
      <category term="C++" scheme="http://yafengshuanger.cn/tags/C/"/>
    
      <category term="PAT乙级" scheme="http://yafengshuanger.cn/tags/PAT%E4%B9%99%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>变量在Java中的运行顺序</title>
    <link href="http://yafengshuanger.cn/2019/10/17/%E5%8F%98%E9%87%8F%E5%9C%A8Java%E4%B8%AD%E7%9A%84%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>http://yafengshuanger.cn/2019/10/17/变量在Java中的运行顺序/</id>
    <published>2019-10-17T13:45:19.000Z</published>
    <updated>2019-10-17T13:54:34.945Z</updated>
    
    <content type="html"><![CDATA[<p>   <strong>在Java中，变量的初始化顺序是：静态变量&amp;静态代码块 》变量&amp;普通代码块 》构造器。</strong>之前的一个误区是构造器的执行顺序是仅次于静态变量和静态得代码块的。换个角度想一下，其实很好理解为什么构造器要在最后在执行。因为，假设构造器中需要一个变量，若变量在构造器之后初始化，这就会造成变量未初始化就调用的现象，显然这在任何编程语言中是不允许的（虽然很多语言都有默认的初始值）。下面举一个简单的例子：<br> <a id="more"></a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamerInit</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"普通代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamerInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BaseClasss class_1=<span class="keyword">new</span> BaseClasss(<span class="string">"普通变量"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BaseClasss class_2=<span class="keyword">new</span> BaseClasss(<span class="string">"静态变量"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ParamerInit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line"> 静态代码块</span><br><span class="line"> 静态变量</span><br><span class="line"> 普通代码块 </span><br><span class="line"> 普通变量</span><br><span class="line"> 构造器</span><br></pre></td></tr></table></figure></div><p>上述例子当中的变量是一个普通的Java对象，对于其他基本类型的变量同样适用，从结果来看，显然构造器是最后来执行的。需要注意的是静态变量和静态代码块以及普通变量和普通代码块之间的顺序又是怎么样的呢？答案是：和其定义的顺序有关，看如下代码以及执行结果。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamerInit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> BaseClasss class_1=<span class="keyword">new</span> BaseClasss(<span class="string">"普通变量"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BaseClasss class_2=<span class="keyword">new</span> BaseClasss(<span class="string">"静态变量"</span>);</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"普通代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamerInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ParamerInit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">静态变量</span><br><span class="line">静态代码块</span><br><span class="line">普通变量</span><br><span class="line">普通代码块</span><br><span class="line">构造器</span><br></pre></td></tr></table></figure></div><p>当我把静态变量和静态代码块以及变量和普通代码块的定义顺序对调之后，得到的结果如上，这说明对于静态的变量和代码块来说，它们之间的执顺序根据其定义顺序而定，同样对于普通变量和代码块来说亦然。</p><p>上述结果都是没有继承类，仅在单一类中的变量执行顺序，那么如果有继承类时，子类和父类当中变量执行顺序又是怎样的？</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该类继承自上述父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsClassInit</span> <span class="keyword">extends</span> <span class="title">ParamerInit</span></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"子类---普通代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"子类---静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExtendsClassInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类---构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BaseClasss class_1=<span class="keyword">new</span> BaseClasss(<span class="string">"子类---普通变量"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BaseClasss class_2=<span class="keyword">new</span> BaseClasss(<span class="string">"子类---静态变量"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ExtendsClassInit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">父类---静态变量</span><br><span class="line">父类---静态代码块</span><br><span class="line">子类---静态代码块</span><br><span class="line">子类---静态变量</span><br><span class="line">父类---普通变量</span><br><span class="line">父类---普通代码块</span><br><span class="line">父类---构造器</span><br><span class="line">子类---普通代码块</span><br><span class="line">子类---普通变量</span><br><span class="line">子类---构造器</span><br></pre></td></tr></table></figure></div><p>从结果很容易的看到，对于有继承类的变量的初始化顺序是首先初始化父类当中的静态变量和代码块，其次是子类当中的静态变量和代码块，然后继续初始化父类中的普通变量和代码块，最后是子类中的普通变量和代码块。即优先初始化的是父类中的变量。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   &lt;strong&gt;在Java中，变量的初始化顺序是：静态变量&amp;amp;静态代码块 》变量&amp;amp;普通代码块 》构造器。&lt;/strong&gt;之前的一个误区是构造器的执行顺序是仅次于静态变量和静态得代码块的。换个角度想一下，其实很好理解为什么构造器要在最后在执行。因为，假设构造器中需要一个变量，若变量在构造器之后初始化，这就会造成变量未初始化就调用的现象，显然这在任何编程语言中是不允许的（虽然很多语言都有默认的初始值）。下面举一个简单的例子：&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yafengshuanger.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yafengshuanger.cn/tags/Java/"/>
    
      <category term="面试知识点" scheme="http://yafengshuanger.cn/tags/%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>计算两个日期之间的天数</title>
    <link href="http://yafengshuanger.cn/2019/10/17/Java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>http://yafengshuanger.cn/2019/10/17/Java中的反射机制/</id>
    <published>2019-10-17T07:49:34.000Z</published>
    <updated>2019-10-17T13:56:32.541Z</updated>
    
    <content type="html"><![CDATA[<p>思路：</p><ol><li>同年同月：之间两个天数相减即可，即（day1-day2-1）很简单。</li><li>同年不同月：先计算完整月数的天数，即从指定日期的写个月开始计算，计算每个月有多少天，都加起来即可；然后计算指定日期到月初和月末的天数。如2019-6-12和2019-2-3，我们先计算3、4、5这三个完整月份的天数，然后计算6月12日到月初的天数，再计算2月3日到月末的天数，三者加起来就是两日期之间的天数。</li><li>年月日都不同：思路和计算不同月的类似。我们可以先计算两个年份之间完整年份的天数，然后再计算较大年份距离年初（1月1日）的天数，再计算较小年份距离年末（12-31）的天数，将三者加起来就是两个日期之间的天数。<a id="more"></a>下面帖出我自己的代码：<br><img src="https://img-blog.csdnimg.cn/20190313152945838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvZGVyX1lhZmVuZw==,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20190313153055453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvZGVyX1lhZmVuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190313153142194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvZGVyX1lhZmVuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190313153312374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvZGVyX1lhZmVuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190313153516136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NvZGVyX1lhZmVuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HowManyDays</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> year;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> month;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> day;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> year;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.year = year;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> month;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonth</span><span class="params">(<span class="keyword">int</span> month)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.month = month;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDay</span><span class="params">(<span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.day = day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HowManyDays</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.year = year;</span><br><span class="line"><span class="keyword">this</span>.month = month;</span><br><span class="line"><span class="keyword">this</span>.day = day;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HowManyDays</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 判断某年是否是闰年</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLeapYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 某年某月 月有多少天</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">daysOfMonth</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(month&gt;<span class="number">12</span>||month&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"日期不合法"</span>);</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">1</span> || month == <span class="number">3</span> || month == <span class="number">5</span> || month == <span class="number">7</span> || month == <span class="number">8</span> || month == <span class="number">10</span> || month == <span class="number">12</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">31</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">4</span> || month == <span class="number">6</span> || month == <span class="number">9</span> || month == <span class="number">11</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeapYear(year) &amp;&amp; month == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">29</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// 非闰年二月28天</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算机本年一共多少天</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">daysOfYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">result = <span class="number">7</span> * <span class="number">31</span> + <span class="number">4</span> * <span class="number">30</span>;<span class="comment">// 不包括闰月</span></span><br><span class="line"><span class="keyword">if</span> (isLeapYear(year)) &#123;</span><br><span class="line">result += <span class="number">29</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result += <span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 计算指定日期到年初的天数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">daysOfYearThis</span><span class="params">(HowManyDays date)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> year=date.getYear();</span><br><span class="line"><span class="keyword">int</span> month=date.getMonth();</span><br><span class="line"><span class="keyword">int</span> day=date.getDay();</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> month2 = <span class="number">1</span>;<span class="comment">// 该年的元月</span></span><br><span class="line"><span class="keyword">if</span>(year&lt;<span class="number">0</span>||month&gt;<span class="number">12</span>||month&lt;<span class="number">0</span>||day&gt;<span class="number">31</span>||day&lt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"日期不合法"</span>);</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (month != month2) &#123;</span><br><span class="line">result += daysOfMonth(year, month2);</span><br><span class="line">month2++;</span><br><span class="line">&#125;</span><br><span class="line">result = result + day;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 计算指定日期到年末的天数</span></span><br><span class="line"><span class="comment"> * 思路：先算完整的月份，即从当前日期的下一个月算起，直到下一年的1月1日，此时算出了下一个月到1月1日之间的天数</span></span><br><span class="line"><span class="comment"> * 再加上此时日期到月底的天数，从而得到本日期到年末之间的天数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">daysOfYear_Next</span><span class="params">(HowManyDays date)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> year=date.getYear();</span><br><span class="line"><span class="keyword">int</span> month=date.getMonth();</span><br><span class="line"><span class="keyword">int</span> day=date.getDay();</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> month2 = <span class="number">1</span>;<span class="comment">// 下一年的元月</span></span><br><span class="line"><span class="keyword">int</span> m = month;</span><br><span class="line"><span class="keyword">if</span>(year&lt;<span class="number">0</span>||month&lt;<span class="number">0</span>||month&gt;<span class="number">12</span>||day&gt;<span class="number">31</span>||day&lt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"日期不合法"</span>);</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (month2 != m) &#123;</span><br><span class="line">m++;<span class="comment">// 先计算下一月到次年1月1日的天数</span></span><br><span class="line"><span class="keyword">if</span> (m &lt; <span class="number">12</span>) &#123;</span><br><span class="line">result += daysOfMonth(year, m);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">12</span>) &#123;<span class="comment">//年内最后一个月</span></span><br><span class="line">result += daysOfMonth(year, m);<span class="comment">//计算12月份天数</span></span><br><span class="line">result += daysOfMonth(year, month) - day;<span class="comment">//daysOfMonth(year, month) - day计算指定日期到月末天数</span></span><br><span class="line">m = <span class="number">1</span>;<span class="comment">//循环结束</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * date1&gt;date2</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">how_many_day</span><span class="params">(HowManyDays date1,HowManyDays date2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m1, m2, y1, y2;</span><br><span class="line"><span class="comment">//exchange(date1, date2);</span></span><br><span class="line"><span class="comment">//System.out.println(date1.getYear()+""+date1.getMonth()+" "+date1.getDay());</span></span><br><span class="line">m1 = date1.getMonth();</span><br><span class="line">m2 = date2.getMonth();</span><br><span class="line">y1 = date1.getYear();</span><br><span class="line">y2 = date2.getYear();</span><br><span class="line"><span class="keyword">if</span> (date1.getYear() == date2.getYear() &amp;&amp; date1.getMonth() == date2.getMonth()) &#123;<span class="comment">// 同年同月</span></span><br><span class="line">result = Math.abs(date1.getDay() - date2.getDay());<span class="comment">//直接计算日期天数之间的差值</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (date1.getYear() == date2.getDay()) &#123;<span class="comment">// 同年不同月</span></span><br><span class="line"><span class="keyword">while</span> ((m2 + <span class="number">1</span>) != m1) &#123;</span><br><span class="line">result += daysOfMonth(date2.getYear(), m2);</span><br><span class="line">m2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * daysOfMonth(year2, month2)-day2-1 计算较小月距离月末还有多少天</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">result = result + date1.getDay() + daysOfMonth(date2.getYear(), date2.getMonth()) - date2.getDay() - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// 不同年，不同月</span></span><br><span class="line"><span class="keyword">while</span> (y1 != (y2+<span class="number">1</span>)) &#123;<span class="comment">//计算完整年的所有天数</span></span><br><span class="line">result += daysOfYear(y2);</span><br><span class="line">y2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在所有完整年计算完之后，再加上较大年份距离年初的天数和较小年份到年初的天数</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">result += daysOfYearThis(date1) + daysOfYear_Next(date2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String ags[])</span> </span>&#123;</span><br><span class="line">HowManyDays hd = <span class="keyword">new</span> HowManyDays();</span><br><span class="line">HowManyDays date1=<span class="keyword">new</span> HowManyDays(<span class="number">2019</span>,<span class="number">10</span>,<span class="number">13</span>);</span><br><span class="line">HowManyDays date2=<span class="keyword">new</span> HowManyDays(<span class="number">2017</span>, <span class="number">10</span>, <span class="number">12</span>);</span><br><span class="line"><span class="keyword">int</span> days = hd.how_many_day(date1,date2);</span><br><span class="line">System.out.println(days);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      同年同月：之间两个天数相减即可，即（day1-day2-1）很简单。同年不同月：先计算完整月数的天数，即从指定日期的写个月开始计算，计算每个月有多少天，都加起来即可
    
    </summary>
    
    
      <category term="Java" scheme="http://yafengshuanger.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yafengshuanger.cn/tags/Java/"/>
    
      <category term="面试知识点" scheme="http://yafengshuanger.cn/tags/%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
</feed>
