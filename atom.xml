<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>码农峰酱</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-17T07:52:46.613Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>亚峰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中的反射机制</title>
    <link href="http://yoursite.com/2019/10/17/Java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/10/17/Java中的反射机制/</id>
    <published>2019-10-17T07:49:34.000Z</published>
    <updated>2019-10-17T07:52:46.613Z</updated>
    
    <content type="html"><![CDATA[<p>一、什么叫Java反射机制？<br>Java中的反射机制是指在运行状态中，对于任意一个类，能够动态获取这个类中的属性和方法；对于任意一个对象，都能够任意调用它的属性和方法。这种动态获取类的信息以及动态调用对象方法的功能称为Java的反射机制。总结就是：反射可以实现运行时知道任意一个类的属性和方法。<br>二、Java当中为什么需要反射机制？工作原理是什么？<br>1、要明白为什么需要反射机制，首先就得先清楚两个概念：<br>（1）静态编译：在编译时就必须要知道变量得类型才能编译通过，比如C++,Java等编译之前必须清楚的指明数据类型；<br>（2）动态编译：显然和上述概念相反，即在编译时不需要立即知道变量的类型，在运行时指明其类型就行。<br>1、有上述概念之后便有了静态语言和动态语言之分，而Java，C++就是典型的静态语言，而Python，Ruby等则为动态语言。但是Java虽是一个静态的解释型语言，但其也有动态的性质——反射（Reflection）。用在Java身上指的是运行时加载，探知，使用编译期间未知的classes。<br>2、下面探讨一下反射是如何在仅知道类名的情况下能够知道整个类的完整构造的（方法，属性等）。<br>首先我们都清楚，Java是一种解释型的语言，即编译器首先将源码编译成class文件，然后虚拟机（JVM）再将class文件解释给目标计算机执行。而这里所说的反射机制操作的其实就是源码编译之后的class文件。首先将class文件加载到内存，然后从该文件中解剖出某个具体类的构造函数，方法和属性，从而完全知道某个类的所有构造。下面给出一个简易的demo及字节码文件。<br>demo源码:<br>package com.tyf.reflect;</p><p>import java.lang.reflect.Field;<br>import java.lang.reflect.Method;</p><p>/*<br> *@Author:yafeng<br> *@Date:2019/10/11<br> *@Time:21:24</p><ul><li><p>Java反射入门</p></li><li><p>/<br>public class Student {<br>  String name=”xiaoshuang”;<br>  String gender;</p><p>  public String getName() {</p><pre><code>return name;</code></pre><p>  }</p><p>  public void setName(String name) {</p><pre><code>this.name = name;</code></pre><p>  }</p><p>  public String getGender() {</p><pre><code>return gender;</code></pre><p>  }</p><p>  public void setGender(String gender) {</p><pre><code>this.gender = gender;</code></pre><p>  }<br>  private void setGender(String gender) {</p><pre><code>this.gender = gender;</code></pre><p>  }<br>  public Student(String name, String gender) {</p><pre><code>this.name = name;this.gender = gender;</code></pre><p>  }<br>  public Student(){};<br>public static void main(String[] args) {<br>   try {</p><pre><code>Class c = Class.forName(&quot;com.tyf.reflect.Student&quot;);Object o = c.newInstance();Field field = c.getDeclaredField(&quot;name&quot;);//Field fields[]=c.getFields();获取所有的public属性field.setAccessible(true);//设置是否允许访问，因为该属性是privated的Object name = field.get(o);System.out.println(name);</code></pre><p>   }catch (Exception e){</p><pre><code>e.printStackTrace();</code></pre><p>   }<br>}<br>}</p></li></ul><p>demo的字节码文件：<br>public class com.tyf.reflect.Student {<br>  java.lang.String name;</p><p>  java.lang.String gender;</p><p>  int age;</p><p>  int studentId;</p><p>  public java.lang.String getName();<br>    Code:<br>       0: aload_0<br>       1: getfield      #1                  // Field name:Ljava/lang/String;<br>       4: areturn</p><p>  public void setName(java.lang.String);<br>    Code:<br>       0: aload_0<br>       1: aload_1<br>       2: putfield      #1                  // Field name:Ljava/lang/String;<br>       5: return</p><p>  public java.lang.String getGender();<br>    Code:<br>       0: aload_0<br>       1: getfield      #2                  // Field gender:Ljava/lang/String;<br>       4: areturn</p><p>  public void setGender(java.lang.String);<br>    Code:<br>       0: aload_0<br>       1: aload_1<br>       2: putfield      #2                  // Field gender:Ljava/lang/String;<br>       5: return<br>  public com.tyf.reflect.Student(java.lang.String, java.lang.String);<br>    Code:<br>       0: aload_0<br>       1: invokespecial #5                  // Method java/lang/Object.”<init>“:()V<br>       4: aload_0<br>       5: ldc           #6                  // String xiaoshuang<br>       7: putfield      #1                  // Field name:Ljava/lang/String;<br>      10: aload_0<br>      11: aload_1<br>      12: putfield      #1                  // Field name:Ljava/lang/String;<br>      15: aload_0<br>      16: aload_2<br>      31: return</p><p>  public com.tyf.reflect.Student();<br>    Code:<br>       0: aload_0<br>       1: invokespecial #5                  // Method java/lang/Object.”<init>“:()V<br>       4: aload_0<br>       5: ldc           #6                  // String xiaoshuang<br>       7: putfield      #1                  // Field name:Ljava/lang/String;<br>      10: return</p><p>  public static void main(java.lang.String[]);<br>    Code:<br>       0: ldc           #7                  // String com.tyf.reflect.Student<br>       2: invokestatic  #8                  // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;<br>       5: astore_1<br>       6: aload_1<br>       7: invokevirtual #9                  // Method java/lang/Class.newInstance:()Ljava/lang/Object;<br>      10: astore_2<br>      11: aload_1<br>      12: ldc           #10                 // String name<br>      14: invokevirtual #11                 // Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;<br>      17: astore_3<br>      18: aload_3<br>      19: iconst_1<br>      20: invokevirtual #12                 // Method java/lang/reflect/Field.setAccessible:(Z)V<br>      23: aload_3<br>      24: aload_2<br>      25: invokevirtual #13                 // Method java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;<br>      28: astore        4<br>      30: getstatic     #14                 // Field java/lang/System.out:Ljava/io/PrintStream;<br>      33: aload         4<br>      35: invokevirtual #15                 // Method java/io/PrintStream.println:(Ljava/lang/Object;)V<br>      38: goto          46<br>      41: astore_1<br>      42: aload_1<br>      43: invokevirtual #17                 // Method java/lang/Exception.printStackTrace:()V<br>      46: return<br>    Exception table:<br>       from    to  target type<br>           0    38    41   Class java/lang/Exception<br>}</p><p>从上面的字节码文件中我们很清楚的能看到类里面的一下public方法和属性。非常值得注意的一点是注意类名，在字节码中使用的是该类的全类名（包名+类名）。因此呢，在使用反射时，forName()方法需要指定该类的全类名，从而从该class文件中可以直接获取原类的完整结构（属性，方法等）。<br>三、反射的使用及入门<br>在使用反射之前，最好清楚一个这样的概念，即类类型。在编程语言中，各种数据都有其数据类型，那么对于类本身而言，它也有自己的类型，即类类型，其实和普通的数据类型差不多，清楚这一点就行。类是java.lang.Class类的实例对象，而Class是所有类的类（There is a class named Class）。对于普通的类实例化时只需要new一个就行，但是要想用new实例化Class是行不通的，因为Class的构造器是私有的（自行查看源码）。<br>1、获取某个类（Student）的Class对象的三种方法：<br>（1）Class c1=Student.class;//通过Student类隐藏的静态变量来获取<br>（2）Class c2=Student.getClass();//通过Stduent的getClass()方法<br>（3）Class c3=Student.forName(“com.tyf.reflect.Student”);//com.tyf.reflect.Student为Student类的全类名。注意：这里的c1，c2，c3是完全一样的，都是Class的对象（学名 类类型）。这里不必纠结Student和c1,c2,c3是否一样了（都叫Class对象），只需了解类类型是什么就行。<br>2、反射中的相关操作<br>（1）如何获取类的方法以及方法的执行：<br> Method method_setName = c.getDeclaredMethod(“setName”, String.class);//setName为将要获取的方法名，后面的为参数列表<br> //Method methods[] = c.getDeclaredMethods();//获取该类的所有方法<br> //Method methods2[]=c.getMethods();//获取该类以及父类的所有public类</p><p>执行getMethods()后的结果：<br>main<br>getName<br>setName<br>getGender<br>wait<br>wait<br>wait<br>equals<br>toString<br>hashCode<br>getClass<br>notify<br>notifyAll</p><p>从上面的结果中可以看到，该方法不但获得了Student类的public方法，同时也获得了Student父类（Object）的public方法，注意未获得setGender()方法，因为其是private方法。<br>执行getDeclaredMethods()来获取方法的结果：<br>main<br>getName<br>setName<br>setGender<br>getGender</p><p>从上述结果可以看到，getDeclaredMethods()获取的是该类的所有方法（public+private）。下面的获取属性的方法结果于上述类似，不再赘述。<br>完整代码如下：<br>try{<br>    Class c = Student.class;<br>    Object o = c.newInstance();//初始化一个实例<br>    Method method_setName = c.getDeclaredMethod(“setName”, String.class);//setName为将要获取的方法名，后面的为参数列表<br>    Method method_getName = c.getDeclaredMethod(“getName”);<br>    //Method methods[] = c.getDeclaredMethods();//获取该类的所有方法<br>    //Method methods2[]=c.getMethods();//获取该类以及父类的所有public类<br>    method_setName.invoke(o,”yafneg”);//唤醒setName()方法<br>    Object name = method_getName.invoke(o);<br>    System.out.println(name);<br>}catch (Exception e){<br>    e.printStackTrace();<br>}</p><p>（2）获取类属性：<br>Field field = c.getDeclaredField(“name”);<br>//Field fields[]=c.getDeclaredFields();//获取所有属性<br>//Field fields[]=c.getFields();获取所有的public子类及父类属性<br>field.setAccessible(true);//设置是否允许访问，因为该属性是privated的</p><p>完整代码：<br>try {<br>    Class c = Class.forName(“com.tyf.reflect.Student”);<br>    Object o = c.newInstance();<br>    Field field = c.getDeclaredField(“name”);<br>    //Field fields[]=c.getDeclaredFields();//获取所有属性<br>    //Field fields[]=c.getFields();获取所有的public子类及父类属性<br>    field.setAccessible(true);//设置是否允许访问，因为该属性是privated的<br>    Object name = field.get(o);//获取该属性值<br>    System.out.println(name);</p><p>}catch (Exception e){<br>    e.printStackTrace();<br>}</p><p>（3）获取类的构造器：<br>try{<br>    Class c = Class.forName(“com.tyf.reflect.Student”);<br>    Constructor constructor = c.getDeclaredConstructor(String.class,String.class);//获取含参的构造器<br>    Object o = constructor.newInstance(“yafeng”,”boy”);//实例化对象<br>    Field field = c.getDeclaredField(“name”);//获取name属性<br>    Object name = field.get(o);//获取属性值<br>    System.out.println(name);<br>}catch (Exception e){<br>    e.printStackTrace();<br>}</p><p>执行结果：<br>“C:\Program Files\Java\jdk1.8.0_101\bin\java.exe” “-javaagent:F:\IntelliJ IDEA 2019.2\lib\idea_rt.jar=65474:F:\IntelliJ IDEA 2019.2\bin” -Dfile.encoding=UTF-8 -classpath “C:\Program Files\Java\jdk1.8.0_101\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_101\jre\lib\rt.jar;D:\IDEA\JavaBase\out\production\JavaBase” com.tyf.reflect.Student<br>yafeng</p><p>四、Java反射机制的应用<br>1、当在某集合中需要放多种数据类型的数据时，可以使用反射机制来解决。<br>为什么可以使用反射机制呢？需要注意的是集合中的泛型只在程序编译阶段有效，而在运行期间无效（相当于没有），而反射机制正好就是运行期间才检测数据检测。看下面代码：<br>public static void main(String[] args) {<br>    Set<String> students=new HashSet&lt;&gt;();<br>    students.add(“tom”);<br>    //students.add(20);报如下异常：Cannot convert type of expression “tom” from java.lang.String to java.lang.Integer<br>  try {<br>      Class c = students.getClass();<br>      Method m = c.getDeclaredMethod(“add”,Object.class);<br>      m.invoke(students,100);</p><pre><code>for(Object o:students){    System.out.println(o);}</code></pre><p>  }catch (Exception e){<br>      e.printStackTrace();<br>  }<br>}</p><p>执行结果：<br>tom<br>100</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、什么叫Java反射机制？&lt;br&gt;Java中的反射机制是指在运行状态中，对于任意一个类，能够动态获取这个类中的属性和方法；对于任意一个对象，都能够任意调用它的属性和方法。这种动态获取类的信息以及动态调用对象方法的功能称为Java的反射机制。总结就是：反射可以实现运行时知道
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/10/17/hello-world/"/>
    <id>http://yoursite.com/2019/10/17/hello-world/</id>
    <published>2019-10-17T02:15:29.286Z</published>
    <updated>2019-10-17T02:15:29.286Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
